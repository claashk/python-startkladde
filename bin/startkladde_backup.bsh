#!/bin/bash 

#Creates backups of MySQL databases
# Usage: generate_backup.sh [dir]
#   [dir] is the directory to store the output archive. Defaults to cwd


USER="backup"            # Name of the db user
PASS="sk"                # Password of USER
DBNAME="startkladde"     # Name of database to backup

#Do not edit beyond this point
#name of the archive file
today=$(date -u +"%Y%m%d_%H%M%S")
key="${today}_${DBNAME}_backup"

backupDir="/tmp/${key}"
archive="/tmp/${key}.tgz"
logFile="/tmp/${key}_error.log"

oDir=$(pwd)

PROGRAM_NAME="$(basename $0 .bsh)"


function plainMessage() {
  printf "$*" >&2
}

function message() {
  plainMessage "${PROGRAM_NAME}: $*"
} 


function resume() {
  plainMessage "done\n"
}

# Clean up file or directory
# Usage CleanUp <name>, where <name> is either a file or a directory
function cleanUp() {

  if [[ -d "$1" ]]; then
    message "Cleaning up ${1} ... "
    rm -r -f "$1"
    resume
  else 
    if [[ -f "$1" ]]; then
      message "Cleaning up ${1} ... "
      rm -f "$1"
      resume
    fi
  fi
  
  return 0
}

# Abort program with exit code 1
function abort() {
  plainMessage "failed\n"
  cat ${logFile}
  cleanUp ${backupDir}
  cleanUp ${logFile}
  message "\nProgram terminated abnormally\n"
  exit 1
}


#Test for command line argument
if [[ $# -gt 0 ]]; then
  
  oDir=$1 #Set output directory
  
  if [[ $# -gt 1 ]]; then
    message "WARNING: All but first command line arguments ignored\n"
  fi
fi


cleanUp ${backupDir}

message "Creating temporary directory ${backupDir}... "

#then try to re-create empty directory
if mkdir $backupDir >& $logFile; then
  
  #Set write permissions for all users
  if chmod 777 $backupDir >& $logFile; then
    resume
  else
    abort
  fi
else
  abort
fi

#set options for mysqldump
options="--tab=${backupDir}"
options="${options} --log-error=${logFile}"
options="${options} --skip-opt"
options="${options} --fields-terminated-by=\t"
options="${options} --fields-enclosed-by=\""
options="${options} --add-locks"
options="${options} --add-drop-table"
options="${options} --lock-tables"
options="${options} --create-options"
options="${options} --complete-insert"
options="${options} --disable-keys"
options="${options} -u ${USER}"
options="${options} -p${PASS}"

message "Dumping database '$DBNAME' to '$backupDir'... "
if mysqldump ${options} ${DBNAME}; then
  resume
else
  abort
fi

message "Creating archive file '${archive}'... "
if tar -C $(dirname ${backupDir}) -czf ${archive} $(basename ${backupDir}) >& $logFile; then
  resume
else
  abort
fi

message "Moving archive to '${oDir}'..."
if mv $archive ${oDir}/ >& $logFile; then
  resume
else
  abort
fi

cleanUp "${backupDir}"
cleanUp "${logFile}"

message "Program terminated successfully\n\n"
exit 0
