#!/bin/bash

# Stand in for the scp command
# Script configured for automatic execution by ssh to allow only the
# transfer of a single file via scp. The file is automatically copied
# to INPUT_DIR and then processed by RESTORE. Before RESTORE is invoked
# a complete backup of the database if performed by BACKUP into BACKUP_DIR
# All logins and status messages are logged to LOG_FILE
#
# For detailed information refer to any of the following sources:
# - http://oreilly.com/catalog/sshtdg/chapter/ch08.html#22858
# - http://binblog.info/2008/10/20/openssh-going-flexible-with-forced-commands/


LOCAL_SCP="/usr/bin/scp"                        #Local scp command for file transfer
LOG_FILE="/home/user/ssh_log.txt"               #Local log file
INPUT_DIR="/home/user/input"                    #Directory containing input files
BACKUP_DIR="/home/user/backup"                  #Directory containing backups
BACKUP="/home/user/bin/startkladde_backup.sh"   #Backup command
RESTORE="/home/user/bin/startkladde_restore.sh" #restore command

#Do not edit beyond this point

PROGRAM_NAME=$(basename $0 .bsh)

#Write message to stderr preceeded by program name
function message() {
  echo "${PROGRAM_NAME}: $*" >& 2
}

# Write message to log file
function log() {
 echo "$(date -u +"%Y-%m-%d %H:%M:%S UTC"): $*" >> $LOG_FILE
}

#Write message to stderr and log file
function logMessage() {
  message $*
  log $*
}

#Abort program after error
function abort() {
  logMessage "Program terminated abnormally!"
  exit 1
}


#Check environment variables set by ssh
regex="(.+) (.+) (.+) (.+)"

#Get host ip and port for log
if [[ "${SSH_CONNECTION}" =~ $regex ]]; then
  HOST_IP=${BASH_REMATCH[1]}
  HOST_PORT=${BASH_REMATCH[2]}
else
  HOST_IP="[undefined host]"
  HOST_PORT=""
fi

log "Login of ${USER}@${HOST_IP}:${HOST_PORT}"

#Check out original ssh command
if [ -n "${SSH_ORIGINAL_COMMAND}" ]; then
  set ${SSH_ORIGINAL_COMMAND}
else
  if [ -n "${SSH2_ORIGINAL_COMMAND}" ]; then
    set ${SSH2_ORIGINAL_COMMAND}
  else
    logMessage "Unable to determine command line arguments"
    abort
  fi
fi

log "Command: '$@'"

#User is not allowed to execute anything but scp
regex="scp -t /" #This is very strict, but should be sufficient
if [[ ! "$@" =~ $regex ]]; then
  logMessage "Illegal ssh command"
  abort
fi

#invoke scp
if ! ${LOCAL_SCP} -t ${INPUT_DIR}; then
  logMessage "Error copying backup file"
  abort
fi

logMessage "Starting  data import ..."
#Get newest input file
inputFile="$(ls -t ${INPUT_DIR}/*_backup.tgz | head -n1)"

if ! [ -r "$inputFile" ]; then
  logMessage "${INPUT_DIR} contains no backup files"
  abort
fi

#Create backup of current database
if ! ${BACKUP} ${BACKUP_DIR}; then
  logMessage "Backup failed"
  abort
fi

#Restore database from input file
if ! ${RESTORE} "${inputFile}"; then
  logMessage "Error importing ${inputFile}"
  abort
fi

rm "$inputFile" #delete input file

logMessage "Program terminated successfully"
exit 0

